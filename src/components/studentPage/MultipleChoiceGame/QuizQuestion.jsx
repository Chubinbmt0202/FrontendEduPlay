// src/components/studentPage/QuizQuestion.jsx

import React from 'react';
import { Radio, Typography, Space, Row, Col } from 'antd';
import { CheckCircleFilled, CloseCircleFilled } from '@ant-design/icons';
import CorectSound from '../../../assets/sound/correct.mp3';
import InCorrectSound from '../../../assets/sound/incorrect.mp3';

// 1. TH√äM L·∫†I: Import c√°c style m√†u s·∫Øc t·ª´ file styles.js
// import { selectedStyle, correctStyle, incorrectStyle, mutedStyle } from './styles';

const { Title } = Typography;

// 2. TH√äM L·∫†I: H√†m logic quy·∫øt ƒë·ªãnh m√†u s·∫Øc cho n√∫t
// H√†m n√†y R·∫§T QUAN TR·ªåNG
// üé® H√†m x√°c ƒë·ªãnh m√†u s·∫Øc & hi·ªáu ·ª©ng cho t·ª´ng n√∫t ƒë√°p √°n
const getButtonStyle = (
    optionIndex,
    question,
    userAnswer,
    result,
    isFinished,
    isChecked
) => {
    const baseStyle = {
        width: '100%',
        fontSize: 16,
        minHeight: '70px',
        height: 'auto',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        whiteSpace: 'normal',
        lineHeight: '1.4',
        borderRadius: '12px',
        transition: 'all 0.25s ease-in-out',
        fontWeight: 500
    };

    const isUserSelection = optionIndex === userAnswer;
    const isCorrectAnswer = optionIndex === Number(question.correct_answer_index);

    // üü¢ TR·∫†NG TH√ÅI 1: ƒê√É N·ªòP B√ÄI (Review)
    if (isFinished) {
        if (isCorrectAnswer) {
            return {
                ...baseStyle,
                backgroundColor: '#d1f7d6',
                borderColor: '#4CAF50',
                color: '#2e7d32',
                boxShadow: '0 0 10px rgba(76,175,80,0.3)'
            };
        }
        if (isUserSelection && result === 'incorrect') {
            return {
                ...baseStyle,
                backgroundColor: '#ffebee',
                borderColor: '#f44336',
                color: '#c62828',
                boxShadow: '0 0 10px rgba(244,67,54,0.25)'
            };
        }
        return {
            ...baseStyle,
            opacity: 0.6,
            backgroundColor: '#f8f9fa',
            borderColor: '#ddd',
            color: '#666'
        };
    }

    if (isChecked) {
        if (isCorrectAnswer) {
            const audio = new Audio(CorectSound);
            audio.play();

            return {
                ...baseStyle,
                backgroundColor: '#d1f7d6',
                borderColor: '#4CAF50',
                color: '#2e7d32',
                boxShadow: '0 0 10px rgba(76,175,80,0.3)'
            };
        }

        if (isUserSelection && result === 'incorrect') {
            // const audio = new Audio(InCorrectSound);
            // audio.play();
            return {
                ...baseStyle,
                backgroundColor: '#ffebee',
                borderColor: '#f44336',
                color: '#c62828',
                boxShadow: '0 0 10px rgba(244,67,54,0.25)'
            };
        }

        // C√°c ƒë√°p √°n kh√°c gi·ªØ m·ªù
        return {
            ...baseStyle,
            opacity: 0.6,
            backgroundColor: '#f8f9fa',
            borderColor: '#ddd',
            color: '#666'
        };
    }


    // üîµ TR·∫†NG TH√ÅI 3: ƒêANG CH∆†I (Ch∆∞a ki·ªÉm tra)
    if (isUserSelection && result === 'incorrect') {
        // Ng∆∞·ªùi d√πng ch·ªçn sai (sau khi ki·ªÉm tra) -> ƒê·ªè
        const audio = new Audio(InCorrectSound);
        audio.play();
        return {
            ...baseStyle,
            backgroundColor: '#ffebee',
            borderColor: '#f44336',
            color: '#c62828',
            boxShadow: '0 0 8px rgba(244,67,54,0.25)'
        };
    }

    if (isUserSelection) {
        // ƒêang ch·ªçn nh∆∞ng ch∆∞a ki·ªÉm tra -> M√†u trung t√≠nh (xanh d∆∞∆°ng nh·∫π)
        return {
            ...baseStyle,
            backgroundColor: '#e3f2fd',
            borderColor: '#2196F3',
            color: '#0d47a1',
            boxShadow: '0 0 8px rgba(33,150,243,0.25)'
        };
    }


    if (isUserSelection) {
        // ƒêang ch·ªçn nh∆∞ng ch∆∞a ki·ªÉm tra -> Xanh d∆∞∆°ng
        return {
            ...baseStyle,
            backgroundColor: '#e3f2fd',
            borderColor: '#2196F3',
            color: '#0d47a1',
            boxShadow: '0 0 8px rgba(33,150,243,0.25)'
        };
    }

    // ‚ö™ B√¨nh th∆∞·ªùng (ch∆∞a ch·ªçn)
    return {
        ...baseStyle,
        backgroundColor: '#fff',
        borderColor: '#ccc',
        color: '#333'
    };
};



function QuizQuestion({
    question,
    questionIndex,
    userAnswer,
    result,
    isFinished,
    isChecked, // (currentAnswerChecked)
    onAnswerChange
}) {
    // Gi·ªØ l·∫°i console.log c·ªßa b·∫°n ƒë·ªÉ debug
    console.log('Rendering QuizQuestion:', questionIndex, 'User Answer:', userAnswer, 'Result:', result, 'isFinished:', isFinished, 'isChecked:', isChecked);

    return (
        <div style={{ width: '100%' }}>
            <Title level={5} style={{ minHeight: 60, marginBottom: 24 }}>
                <Space>
                    {/* Hi·ªÉn th·ªã icon ƒê√∫ng/Sai khi review */}
                    {isFinished && (
                        result === 'correct' ? (
                            <CheckCircleFilled style={{ color: 'green' }} />
                        ) : (
                            <CloseCircleFilled style={{ color: 'red' }} />
                        )
                    )}
                    {`C√¢u ${questionIndex + 1}: ${question.question_text}`}
                </Space>
            </Title>
            <Radio.Group
                value={userAnswer}
                onChange={(e) => onAnswerChange(e.target.value)}
                style={{ width: '100%' }}
                // B·ªã v√¥ hi·ªáu h√≥a khi: ƒê√£ n·ªôp B√ÄI, ho·∫∑c ƒë√£ tr·∫£ l·ªùi ƒê√öNG
                disabled={isChecked || isFinished}
            >
                <Row gutter={[16, 16]}>
                    {question.options.map((opt, i) => (
                        <Col span={12} key={i}>
                            <Radio.Button
                                value={i}
                                // 3. TH√äM L·∫†I: Prop "style" b·ªã m·∫•t
                                // D√≤ng n√†y √°p d·ª•ng h√†m logic style ·ªü tr√™n
                                style={getButtonStyle(
                                    i,
                                    question,
                                    userAnswer,
                                    result,
                                    isFinished,
                                    isChecked
                                )}
                            >
                                {opt}
                            </Radio.Button>
                        </Col>
                    ))}
                </Row>
            </Radio.Group>
        </div>
    );
}

export default QuizQuestion;