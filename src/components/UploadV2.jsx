import React, { useState, useEffect, useRef } from 'react';
import { Upload, Button, Input, Form, Spin, Result } from 'antd';
import { UploadOutlined, LoadingOutlined, CheckCircleOutlined, RedoOutlined } from '@ant-design/icons';

const PdfUploaderPage = () => {
    const [form] = Form.useForm();
    // Th√™m tr·∫°ng th√°i 'result'
    const [status, setStatus] = useState('form');
    const [currentStep, setCurrentStep] = useState(0);
    // Ref ƒë·ªÉ l∆∞u tr·ªØ ID c·ªßa interval/timeout ƒë·ªÉ d·ªçn d·∫πp
    const intervalRef = useRef(null);

    const loadingSteps = [
        "Ch√∫ng t√¥i ƒëang ƒë·ªçc b√†i gi·∫£ng c·ªßa b·∫°n üìö",
        "Ch√∫ng t√¥i ƒëang ph√¢n t√≠ch n·ªôi dung üßê",
        "Ch√∫ng t√¥i ƒëang t·∫°o b·ªô c√¢u h·ªèi üéâ",
        "Ch·ªù ch√∫t x√≠u n·ªØa th√¥i üòâ"
    ];

    // D·ªçn d·∫πp interval khi component unmount
    useEffect(() => {
        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, []);

    const onFinish = (values) => {
        console.log('Submitted values:', values);

        // 1. Chuy·ªÉn sang tr·∫°ng th√°i 'loading'
        setStatus('loading');
        setCurrentStep(0);

        // X√≥a interval c≈© n·∫øu c√≥ (quan tr·ªçng cho vi·ªác d·ªçn d·∫πp)
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }

        // 2. Thi·∫øt l·∫≠p interval ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa c√°c b∆∞·ªõc loading (v√≠ d·ª•: m·ªói 3 gi√¢y)
        let step = 0;
        intervalRef.current = setInterval(() => {
            step++;
            // Chuy·ªÉn ƒë·ªïi th√¥ng b√°o tu·∫ßn ho√†n (tr√°nh v∆∞·ª£t qu√° m·∫£ng)
            setCurrentStep(step % loadingSteps.length);
        }, 3000); // Thay ƒë·ªïi th√¥ng b√°o m·ªói 3 gi√¢y

        // 3. Thi·∫øt l·∫≠p setTimeout ƒë·ªÉ chuy·ªÉn sang tr·∫°ng th√°i 'result' sau 30 gi√¢y
        setTimeout(() => {
            // D·ª´ng interval animation
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
            // Chuy·ªÉn sang tr·∫°ng th√°i k·∫øt qu·∫£
            setStatus('result');

        }, 10000); // 30 gi√¢y
    };

    const handleCreateNew = () => {
        // X·ª≠ l√Ω t·∫°o l·∫°i b·ªô ƒë·ªÅ: reset form v√† tr·∫°ng th√°i
        form.resetFields();
        setStatus('form');
        setCurrentStep(0);
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }
    };

    const uploadProps = {
        name: 'file',
        multiple: true,
        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
        beforeUpload: () => false,
    };

    // Component/Ph·∫ßn hi·ªÉn th·ªã Animation Loading
    const LoadingAnimation = () => (
        <div className="flex-1 border-2 bg-blue-50 border-dashed border-gray-300 rounded-lg flex flex-col justify-center items-center text-center p-10 space-y-8">
            <Spin indicator={<LoadingOutlined style={{ fontSize: 60, color: '#1890ff' }} spin />} />
            <p className="text-4xl font-bold text-blue-700 h-20 flex items-center justify-center transition-opacity duration-1000 ease-in-out">
                {loadingSteps[currentStep]}
            </p>
            <p className="text-gray-500 text-lg">Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian. Vui l√≤ng gi·ªØ nguy√™n trang.</p>
        </div>
    );

    // Component/Ph·∫ßn hi·ªÉn th·ªã K·∫øt qu·∫£
    const ResultSection = () => (
        <div className="flex-1 border-2 bg-green-50 border-solid border-green-300 rounded-lg flex flex-col justify-center items-center text-center p-10 space-y-8">
            <CheckCircleOutlined style={{ fontSize: 60, color: '#52c41a' }} />
            <h2 className="text-4xl font-bold text-green-700 mt-[20px]">T·∫°o b·ªô c√¢u h·ªèi th√†nh c√¥ng!</h2>
            <p className="text-gray-600 text-lg mt-[10px]">H·ªá th·ªëng ƒë√£ ho√†n th√†nh vi·ªác t·∫°o b·ªô ƒë·ªÅ c·ªßa b·∫°n.</p>

            <div className="flex space-x-4 mt-6 mt-[30px]">
                <Button
                    type="primary"
                    size="large"
                    className="bg-blue-500 hover:bg-blue-600 border-none px-8 h-12 mr-[10px]"
                    // Th√™m logic xem th·ª≠ b·ªô ƒë·ªÅ ·ªü ƒë√¢y
                    onClick={() => console.log('Xem th·ª≠ b·ªô ƒë·ªÅ')}
                >
                    Xem th·ª≠ b·ªô ƒë·ªÅ
                </Button>
                <Button
                    icon={<RedoOutlined />}
                    size="large"
                    className="h-12 border-blue-500 text-blue-500 hover:border-blue-600 hover:text-blue-600"
                    onClick={handleCreateNew}
                >
                    T·∫°o l·∫°i b·ªô ƒë·ªÅ
                </Button>
            </div>
        </div>
    );

    // Component/Ph·∫ßn hi·ªÉn th·ªã Upload File (m·∫∑c ƒë·ªãnh)
    const UploadSection = () => (
        <div className="flex-1 border-2 bg-blue-50 border-dashed border-gray-300 rounded-lg flex flex-col justify-center items-center text-center p-10">
            <p className="text-4xl font-semibold text-gray-800">K√©o ho·∫∑c th·∫£ file</p>
            <p className="text-4xl font-semibold text-gray-800"> pdf t·∫°i ƒë√¢y</p>
            <p className="text-gray-600 mt-[10px] mb-[50px]">ho·∫∑c nh·∫•p v√†o n√∫t "T·∫£i l√™n file"</p>
            <Upload {...uploadProps} accept=".pdf">
                <Button icon={<UploadOutlined />} className="w-[300px] h-[60px] hover:bg-blue-600 border-none px-6 py-3 rounded-md">
                    T·∫£i l√™n file
                </Button>
            </Upload>
        </div>
    );

    // Logic hi·ªÉn th·ªã ph·∫ßn b√™n tr√°i
    const renderLeftSection = () => {
        if (status === 'loading') {
            return <LoadingAnimation />;
        }
        if (status === 'result') {
            return <ResultSection />;
        }
        return <UploadSection />;
    };

    return (
        <>
            <h1 className='font-bold text-4xl p-[30px]'>Cung c·∫•p t√†i li·ªáu c·ªßa b·∫°n</h1>
            <div className="flex justify-center items-center bg-gray-100 p-10">
                <div className="bg-white h-[500px] rounded-lg w-full max-w-8xl flex shadow-xl/30">
                    {/* Left Section: Hi·ªÉn th·ªã d·ª±a tr√™n tr·∫°ng th√°i */}
                    {renderLeftSection()}

                    {/* Right Section: Additional Information */}
                    <div className=" p-[50px] rounded-lg ml-[10px] w-full max-w-md">
                        <h2 className="text-2xl font-bold text-left text-gray-800">B·ªï sung th√™m th√¥ng tin</h2>
                        <p className="text-gray-600 italic text-left">Th√¥ng tin n√†y s·∫Ω gi√∫p ch√∫ng t√¥i hi·ªÉu r√µ h∆°n v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n.</p>
                        <Form
                            form={form}
                            layout="vertical"
                            onFinish={onFinish}
                            className="space-y-4 mt-[20px]"
                        >
                            <Form.Item
                                label="B·∫°n ƒëang gi·∫£ng d·∫°y l·ªõp m·∫•y?"
                                name="classTaught"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªõp b·∫°n ƒëang gi·∫£ng d·∫°y!' }]}
                            >
                                <Input
                                    className='p-[10px]'
                                    placeholder="V√≠ d·ª•: L·ªõp 10A1"
                                    // V√¥ hi·ªáu h√≥a input khi ƒëang loading/result
                                    disabled={status !== 'form'}
                                />
                            </Form.Item>

                            <Form.Item
                                label="B·∫°n mu·ªën c√≥ bao nhi√™u c√¢u h·ªèi trong 1 b√†i?"
                                name="numQuestions"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng c√¢u h·ªèi!' }]}
                            >
                                <Input
                                    className='p-[10px]'
                                    type="number"
                                    placeholder="V√≠ d·ª•: 20"
                                    min={1}
                                    // V√¥ hi·ªáu h√≥a input khi ƒëang loading/result
                                    disabled={status !== 'form'}
                                />
                            </Form.Item>

                            <Form.Item>
                                <Button
                                    type="primary"
                                    htmlType="submit"
                                    // Ch·ªâ cho ph√©p submit khi ·ªü tr·∫°ng th√°i 'form'
                                    disabled={status !== 'form'}
                                    className="w-[200px] h-[50px] mt-[20px] bg-blue-500 text-white hover:bg-blue-600 border-none px-6 py-3 rounded-md"
                                >
                                    {status === 'loading' ? 'ƒêang X·ª≠ L√Ω...' : 'T·∫°o b·ªô c√¢u h·ªèi'}
                                </Button>
                            </Form.Item>
                        </Form>
                    </div>
                </div>
            </div>
        </>
    );
};

export default PdfUploaderPage;